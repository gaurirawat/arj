Why DAO?
- controller is to define endpoints of the application
- service is to handle ugly business logic and separate it from our endpoints
- DAO is for accessing data models and do CRUD hence it will decouple business logic and access layer so they can grow independently.

Optional:
- Is to establish that there can be no value to return and method will make explicit check everytime we use it so to avoid nullPointer exception.
- https://www.baeldung.com/java-optional-return
- https://dzone.com/articles/java-8-optional-how-use-it#:~:text=Optional%20is%20a%20new%20container,ssn)%20%7B%20...%20%7D

getOne() vs findById():
- https://stackoverflow.com/questions/24482117/when-use-getone-and-findone-methods-spring-data-jpa

Passing of data
https://lankydan.dev/2017/03/11/passing-data-transfer-objects-with-get-in-spring-boot
https://www.xspdf.com/resolution/50438739.html

FetchType Lazy and Eager:
-to-many : Default is Lazy
-to-one : Default is Eager
https://thorben-janssen.com/entity-mappings-introduction-jpa-fetchtypes/

Annotations:
@JsonRootName('value'): to use custom value as key in serialization and deserialization. We need to explicitly enable WRAP_ROOT_VALUE for root-name to be used.
If not specified then class name will be used.
@JsonIgnoreProperties:
https://www.concretepage.com/jackson-api/jackson-jsonignore-jsonignoreproperties-and-jsonignoretype#JsonIgnoreProperties

Circular Reference:
https://www.baeldung.com/jackson-bidirectional-relationships-and-infinite-recursion

Remaining:
Mr->status is int and not string
createProjectService(); check
findProcessedMR();
findItemsByService(); : test
Controller:
findAssignedProject()
findAllPendingMRs()
new Ones
test MR service

Corrections:
the findItemByService service is consuming incorrect dao function.

mr-> service-> item-> itemMRMapping-> mr
itemMRMappings-> materialRequest-> service-> items-> itemMRMappings

unidirectional mapping best practices:
https://www.baeldung.com/hibernate-one-to-many
